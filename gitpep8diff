#!/usr/bin/env python

"""
This can be used to find pep 8 violations added in the current "git diff",
ignoring pre-existing pep8 violations in the tree.

USE:

    GIT_EXTERNAL_DIFF='gitpep8diff' git diff ...

Suggested: "--diff-filter=AM" to avoid complaining when files are renamed.
"""

import os
import sys
import difflib

import pep8


def lines_added(file1, file2):
    """
    Return the set of lines added or replaced in file2.
    """
    line_numbers = set()
    seq_match = difflib.SequenceMatcher(None, file1, file2)
    for tag, i1, i2, j1, j2 in seq_match.get_opcodes():
        if tag in ('replace', 'insert'):
            line_numbers.update(xrange(j1 + 1, j2 + 1))
    return line_numbers


class LineChecker(pep8.Checker):
    """
    Find pep8 violations that occur on the given line numbers.
    """
    def __init__(self, lines, line_numbers):
        self._line_numbers = line_numbers
        pep8.Checker.__init__(self, None, lines)

    def check(self):
        self._line_errors = []
        self.check_all()
        return self._line_errors

    def report_error(self, line_number, offset, text, check):
        if line_number in self._line_numbers:
            self._line_errors.append((line_number, text))


if __name__ == '__main__':
    _, filename, old, _, _, new, _, _ = sys.argv
    if filename.endswith('.py'):
        old_lines = list(open(old))
        new_lines = list(open(new))
        # well, at least it's vaguely reusable..
        pep8.process_options(['blah', 'crap', 'whatever'])
        additions = lines_added(old_lines, new_lines)
        checker = LineChecker(new_lines, additions)
        for line_number, error_text in checker.check():
            print "%s:%s:%s" % (filename, line_number, error_text)

